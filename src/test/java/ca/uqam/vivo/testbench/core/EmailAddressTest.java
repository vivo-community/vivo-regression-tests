package ca.uqam.vivo.testbench.core;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.After;
import org.junit.Before;
// Generated by Selenium IDE
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import ca.uqam.vivo.testbench.util.SampleGraphUtil;
/**
 * 
 * @author Michel Heon
 * EmailAdressTest.java
 * 
 * 2020-04-16
 * This test validates the addition, modification and deletion of an email address for a user.
 */
public class EmailAddressTest {
    private static final Log log = LogFactory.getLog(EmailAddressTest.class);
    private WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;
    private String sparqlEndpointUrl;
    private String userName;
    private String password;
    private SampleGraphUtil sgu;
    private String usrURI = "http://localhost:8080/vivo/individual/n6870";
    private String predicatToTestURI = "http://www.w3.org/2006/vcard/ns#email";

    @Before
    public void setUp() {
        sgu = new SampleGraphUtil();
        // Loading all sample-data
        sgu.delete();
        sgu.load();
        System.setProperty("webdriver.gecko.driver", "./lib/geckodriver-v0.26.0-win64/geckodriver.exe");
        driver = new FirefoxDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
        sparqlEndpointUrl = "http://localhost:8080/vivo/api/sparqlQuery";
        userName="vivo@uqam.ca";
        password="Vivo2435....";
    }
    @After
    public void tearDown() {
        driver.quit();
        // Cleaning all sample-data
  //      sgu.delete();
    }
    @Test
    public void EmailAdressTest() throws InterruptedException {
        /*
         * Login
         */
        phase1();
        /*
         * add email to Peter Japer
         */
        driver.manage().window().setSize(new Dimension(1248, 979));
        // 3 | click | linkText=Peters, Jasper I | 
        TimeUnit.SECONDS.sleep(5);
        phase2();
        /*
         * Modify email
         */
        phase3();
        /*
         * Deleting email
         */
        phase4();
    }
    private void phase4() {
        log.info("Phase 4 Email modification validation");
        // 12 | click | css=#primary-email .delete-individual | 
        log.info("deleting email address ");
        driver.findElement(By.cssSelector("#primary-email .delete-individual")).click();
        // 13 | click | id=submit | 
        driver.findElement(By.id("submit")).click();
        String returnEmail = SampleGraphUtil.getValueFromTripleStore(query(), usrURI, predicatToTestURI);
        assertNull(returnEmail);
        log.info("Phase 4 Email modification validation done");
        
    }
    private void phase3() {
        log.info("Phase 3 Email modification validation");
        String emailToTest = "japer@someemail.org";
        // 8 | click | css=#primary-email .edit-individual | 
        driver.findElement(By.cssSelector("#primary-email .edit-individual")).click();
        // 9 | click | id=emailAddress | 
        driver.findElement(By.id("emailAddress")).click();
//        driver.findElement(By.id("emailAddress")).sendKeys(Keys.CONTROL,"a",Keys.DELETE);
        // 10 | type | id=emailAddress | peter.japer@someemail.com
        log.info("replacing the actual address by: "+emailToTest);
        driver.findElement(By.id("emailAddress")).sendKeys(Keys.CONTROL,"a",Keys.DELETE,emailToTest);
        // 11 | click | id=submit | 
        driver.findElement(By.id("submit")).click();
        String returnEmail = SampleGraphUtil.getValueFromTripleStore(query(), usrURI, predicatToTestURI);
        assertNotNull(returnEmail);
        assertEquals(emailToTest, returnEmail);
        log.info("Phase 3 Email modification validation done");
    }

    private void phase2() throws InterruptedException {
        log.info("Phase 2 Email validation");
        String emailToTest = "peter.japer@someemail.org";
        /*  Equivalent to
         *         driver.findElement(By.linkText("Peters, Jasper I")).click();
         */
        driver.get(usrURI);
        TimeUnit.SECONDS.sleep(1);
        // 4 | click | xpath=(//img[@alt='add'])[2] | 
        driver.findElement(By.xpath("(//img[@alt=\'add\'])[2]")).click();
        // 5 | click | id=emailAddress | 
        driver.findElement(By.id("emailAddress")).click();
        // 6 | type | id=emailAddress | peter.japer@someemail.org
        log.info("adding "+emailToTest);
        driver.findElement(By.id("emailAddress")).sendKeys(emailToTest);
        // 7 | click | id=submit | 
        driver.findElement(By.id("submit")).click();
        String returnEmail = SampleGraphUtil.getValueFromTripleStore(query(), usrURI, predicatToTestURI);
        assertNotNull(returnEmail);
        assertEquals(emailToTest, returnEmail);
        log.info("Phase 2 Email validation done");
    }
    private void phase1() throws InterruptedException {
        log.info("Phase 1 Login");
        driver.get("http://localhost:8080/vivo/");
        driver.manage().window().setSize(new Dimension(1669, 1208));
        driver.findElement(By.id("loginName")).click();
        driver.findElement(By.id("loginPassword")).sendKeys(password);
        driver.findElement(By.id("loginName")).sendKeys(userName);
        driver.findElement(By.name("loginForm")).click();
        assertNotNull(driver);
        log.info("Cleaning solr index");
        driver.get( "http://localhost:8080/vivo/SearchIndex?rebuild=true");
        log.info("Phase 1 Login done");

    }

    private String query() {
        String queryStr = SampleGraphUtil.getPrefixList()+ 
                "construct { <"+ usrURI +"> vcard:email  ?email . } \n"
                + "where {  \n"
                + "<"+ usrURI +"> obo:ARG_2000028/vcard:hasEmail/vcard:email  ?email . \n"
                +"}";
        return queryStr;
    }
}
